syntax = "proto3";
package influxdata.iox.table.v1;
option go_package = "github.com/influxdata/iox/table/v1";

import "influxdata/iox/partition_template/v1/template.proto";


service TableService {
  // Get tables within a namespace
  rpc GetTables(GetTablesRequest) returns (GetTablesResponse);

  // Get a table within a namespace
  rpc GetTable(GetTableRequest) returns (GetTableResponse);

  // Create a table in a namespace
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
}

message CreateTableRequest {
  // Name of the table to be created
  string name = 1;

  // Name of the namespace to create the table in
  string namespace = 2;

  // Partitioning scheme to use for writes to this table. If not specified, the
  // namespace's partition template will be used.
  //
  // Any use of "tag_value" template parts will cause the named column schema to
  // be set as "tag" as part of this request.
  optional influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 3;
}

message CreateTableResponse {
  Table table = 1;
}

message Table {
  // Table ID
  int64 id = 1;

  // Name of the Table
  string name = 2;

  // Namespace ID
  int64 namespace_id = 3;

  // The partitioning scheme applied to writes for this table
  influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 4;
}

message GetTablesRequest {
  oneof target {
    // Name of the namespace to list tables for.
    string namespace_name = 1 [deprecated = true];
    // The unique ID of the namespace to list tables for.
    int64 namespace_id = 2;
  }
}

message GetTableRequest {
  // Name of the namespace to  table for.
  string namespace_name = 1;

  // Name of the table to get from namespace
  string table_name = 2;
}

message GetTablesResponse {
  // Tables contained within the namespace.
  repeated Table tables = 1;
}

message GetTableResponse {
  // Table contained within a namespace
  Table table = 1;
}
