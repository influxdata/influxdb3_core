// The API for the catalog service

syntax = "proto3";
package influxdata.iox.catalog.v2;
option go_package = "github.com/influxdata/iox/catalog/v2";

import "influxdata/iox/partition_template/v1/template.proto";
import "influxdata/iox/column_type/v1/type.proto";
import "influxdata/iox/catalog_cache/v1/value.proto";

service CatalogService {
  rpc RootSnapshot(RootSnapshotRequest) returns (RootSnapshotResponse);

  rpc NamespaceCreate(NamespaceCreateRequest) returns (NamespaceCreateResponse);
  rpc NamespaceUpdateRetentionPeriod(NamespaceUpdateRetentionPeriodRequest) returns (NamespaceUpdateRetentionPeriodResponse);
  rpc NamespaceList(NamespaceListRequest) returns (stream NamespaceListResponse);
  rpc NamespaceGetById(NamespaceGetByIdRequest) returns (NamespaceGetByIdResponse);
  rpc NamespaceGetByName(NamespaceGetByNameRequest) returns (NamespaceGetByNameResponse);
  rpc NamespaceSoftDelete(NamespaceSoftDeleteRequest) returns (NamespaceSoftDeleteResponse);
  rpc NamespaceUpdateTableLimit(NamespaceUpdateTableLimitRequest) returns (NamespaceUpdateTableLimitResponse);
  rpc NamespaceUpdateColumnLimit(NamespaceUpdateColumnLimitRequest) returns (NamespaceUpdateColumnLimitResponse);
  rpc NamespaceSnapshot(NamespaceSnapshotRequest) returns (NamespaceSnapshotResponse);
  rpc NamespaceSnapshotByName(NamespaceSnapshotByNameRequest) returns (NamespaceSnapshotByNameResponse);

  rpc TableCreate(TableCreateRequest) returns (TableCreateResponse);
  rpc TableGetById(TableGetByIdRequest) returns (TableGetByIdResponse);
  rpc TableGetByNamespaceAndName(TableGetByNamespaceAndNameRequest) returns (TableGetByNamespaceAndNameResponse);
  rpc TableListByNamespaceId(TableListByNamespaceIdRequest) returns (stream TableListByNamespaceIdResponse);
  rpc TableList(TableListRequest) returns (stream TableListResponse);
  rpc TableSnapshot(TableSnapshotRequest) returns (TableSnapshotResponse);

  rpc ColumnCreateOrGet(ColumnCreateOrGetRequest) returns (ColumnCreateOrGetResponse);
  rpc ColumnCreateOrGetManyUnchecked(ColumnCreateOrGetManyUncheckedRequest) returns (stream ColumnCreateOrGetManyUncheckedResponse);
  rpc ColumnListByNamespaceId(ColumnListByNamespaceIdRequest) returns (stream ColumnListByNamespaceIdResponse);
  rpc ColumnListByTableId(ColumnListByTableIdRequest) returns (stream ColumnListByTableIdResponse);
  rpc ColumnList(ColumnListRequest) returns (stream ColumnListResponse);

  rpc PartitionCreateOrGet(PartitionCreateOrGetRequest) returns (PartitionCreateOrGetResponse);
  rpc PartitionGetByIdBatch(PartitionGetByIdBatchRequest) returns (stream PartitionGetByIdBatchResponse);
  rpc PartitionListByTableId(PartitionListByTableIdRequest) returns (stream PartitionListByTableIdResponse);
  rpc PartitionListIds(PartitionListIdsRequest) returns (stream PartitionListIdsResponse);
  rpc PartitionCasSortKey(PartitionCasSortKeyRequest) returns (PartitionCasSortKeyResponse);
  rpc PartitionRecordSkippedCompaction(PartitionRecordSkippedCompactionRequest) returns (PartitionRecordSkippedCompactionResponse);
  rpc PartitionGetInSkippedCompactions(PartitionGetInSkippedCompactionsRequest) returns (stream PartitionGetInSkippedCompactionsResponse);
  rpc PartitionListSkippedCompactions(PartitionListSkippedCompactionsRequest) returns (stream PartitionListSkippedCompactionsResponse);
  rpc PartitionDeleteSkippedCompactions(PartitionDeleteSkippedCompactionsRequest) returns (PartitionDeleteSkippedCompactionsResponse);
  rpc PartitionMostRecentN(PartitionMostRecentNRequest) returns (stream PartitionMostRecentNResponse);
  rpc PartitionNewFileBetween(PartitionNewFileBetweenRequest) returns (stream PartitionNewFileBetweenResponse);
  rpc PartitionNeedingColdCompact(PartitionNeedingColdCompactRequest) returns (stream PartitionNeedingColdCompactResponse);
  rpc PartitionUpdateColdCompact(PartitionUpdateColdCompactRequest) returns (PartitionUpdateColdCompactResponse);
  rpc PartitionListOldStyle(PartitionListOldStyleRequest) returns (stream PartitionListOldStyleResponse);
  rpc PartitionDeleteByRetention(PartitionDeleteByRetentionRequest) returns (stream PartitionDeleteByRetentionResponse);
  rpc PartitionSnapshot(PartitionSnapshotRequest) returns (PartitionSnapshotResponse);

  rpc ParquetFileFlagForDeleteByRetention(ParquetFileFlagForDeleteByRetentionRequest) returns (stream ParquetFileFlagForDeleteByRetentionResponse);
  rpc ParquetFileDeleteOldIdsOnly(ParquetFileDeleteOldIdsOnlyRequest) returns (stream ParquetFileDeleteOldIdsOnlyResponse);
  rpc ParquetFileListByPartitionNotToDeleteBatch(ParquetFileListByPartitionNotToDeleteBatchRequest) returns (stream ParquetFileListByPartitionNotToDeleteBatchResponse);
  rpc ParquetFileActiveAsOf(ParquetFileActiveAsOfRequest) returns (stream ParquetFileActiveAsOfResponse);
  rpc ParquetFileGetByObjectStoreId(ParquetFileGetByObjectStoreIdRequest) returns (ParquetFileGetByObjectStoreIdResponse);
  rpc ParquetFileExistsByObjectStoreIdBatch(stream ParquetFileExistsByObjectStoreIdBatchRequest) returns (stream ParquetFileExistsByObjectStoreIdBatchResponse);
  rpc ParquetFileCreateUpgradeDelete(ParquetFileCreateUpgradeDeleteRequest) returns (ParquetFileCreateUpgradeDeleteResponse);
}

message RootSnapshotRequest {}

message RootSnapshotResponse {
  catalog_cache.v1.Root root = 1;
  uint64 generation = 2;
}

message NamespaceCreateRequest {
  string name = 1;
  influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 2;
  optional int64 retention_period_ns = 3;
  ServiceProtectionLimits service_protection_limits = 4;
}

message NamespaceCreateResponse {
  Namespace namespace = 1;
}

message NamespaceUpdateRetentionPeriodRequest {
  string name = 1;
  optional int64 retention_period_ns = 2;
}

message NamespaceUpdateRetentionPeriodResponse {
  Namespace namespace = 1;
}

message NamespaceListRequest {
  SoftDeletedRows deleted = 1;
}

message NamespaceListResponse {
  Namespace namespace = 1;
}

message NamespaceGetByIdRequest {
  int64 id = 1;
  SoftDeletedRows deleted = 2;
}

message NamespaceGetByIdResponse {
  Namespace namespace = 1;
}

message NamespaceGetByNameRequest {
  string name = 1;
  SoftDeletedRows deleted = 2;
}

message NamespaceGetByNameResponse {
  Namespace namespace = 1;
}

message NamespaceSoftDeleteRequest {
  string name = 1;
}

message NamespaceSoftDeleteResponse {
  int64 namespace_id = 1;
}

message NamespaceUpdateTableLimitRequest {
  string name = 1;
  int32 new_max = 2;
}

message NamespaceUpdateTableLimitResponse {
  Namespace namespace = 1;
}

message NamespaceUpdateColumnLimitRequest {
  string name = 1;
  int32 new_max = 2;
}

message NamespaceUpdateColumnLimitResponse {
  Namespace namespace = 1;
}

message NamespaceSnapshotRequest {
  int64 namespace_id = 1;
}

message NamespaceSnapshotByNameRequest {
  string name = 1;
}

message NamespaceSnapshotResponse {
  catalog_cache.v1.Namespace namespace = 1;
  uint64 generation = 2;
}

message NamespaceSnapshotByNameResponse {
  catalog_cache.v1.Namespace namespace = 1;
  uint64 generation = 2;
}

message TableCreateRequest {
  string name = 1;
  influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 2;
  int64 namespace_id = 3;
}

message TableCreateResponse {
  Table table = 1;
}

message TableGetByIdRequest {
  int64 id = 1;
}

message TableGetByIdResponse {
  Table table = 1;
}

message TableGetByNamespaceAndNameRequest {
  int64 namespace_id = 1;
  string name = 2;
}

message TableGetByNamespaceAndNameResponse {
  Table table = 1;
}

message TableListByNamespaceIdRequest {
  int64 namespace_id = 1;
}

message TableListByNamespaceIdResponse {
  Table table = 1;
}

message TableListRequest {}

message TableListResponse {
  Table table = 1;
}

message TableSnapshotRequest {
  int64 table_id = 1;
}

message TableSnapshotResponse {
  catalog_cache.v1.Table table = 1;
  uint64 generation = 2;
}

message ColumnCreateOrGetRequest {
  string name = 1;
  int64 table_id = 2;
  influxdata.iox.column_type.v1.ColumnType column_type = 3;
}

message ColumnCreateOrGetResponse {
  Column column = 1;
}

message ColumnCreateOrGetManyUncheckedRequest {
  int64 table_id = 1;
  map<string, influxdata.iox.column_type.v1.ColumnType> columns = 2;
}

message ColumnCreateOrGetManyUncheckedResponse {
  Column column = 1;
}

message ColumnListByNamespaceIdRequest {
  int64 namespace_id = 1;
}

message ColumnListByNamespaceIdResponse {
  Column column = 1;
}

message ColumnListByTableIdRequest {
  int64 table_id = 1;
}

message ColumnListByTableIdResponse {
  Column column = 1;
}

message ColumnListRequest {}

message ColumnListResponse {
  Column column = 1;
}

message PartitionCreateOrGetRequest {
  string key = 1;
  int64 table_id = 2;
}

message PartitionCreateOrGetResponse {
  Partition partition = 1;
}

message PartitionGetByIdBatchRequest {
  repeated int64 partition_ids = 1;
}

message PartitionGetByIdBatchResponse {
  Partition partition = 1;
}

message PartitionGetByHashIdBatchRequest {
  repeated bytes partition_hash_ids = 1;
}

message PartitionGetByHashIdBatchResponse {
  Partition partition = 1;
}

message PartitionListByTableIdRequest {
  int64 table_id = 1;
}

message PartitionListByTableIdResponse {
  Partition partition = 1;
}

message PartitionListIdsRequest {}

message PartitionListIdsResponse {
  int64 partition_id = 1;
}

message PartitionCasSortKeyRequest {
  int64 partition_id = 1;
  SortKeyIds old_sort_key_ids = 2;
  SortKeyIds new_sort_key_ids = 3;
}

message PartitionCasSortKeyResponse {
  oneof res {
    Partition partition = 1;
    SortKeyIds current_sort_key = 2;
  }
}

message PartitionRecordSkippedCompactionRequest {
  int64 partition_id = 1;
  string reason = 2;
  uint64 num_files = 3;
  uint64 limit_num_files = 4;
  uint64 limit_num_files_first_in_partition = 5;
  uint64 estimated_bytes = 6;
  uint64 limit_bytes = 7;
}

message PartitionRecordSkippedCompactionResponse {}

message PartitionGetInSkippedCompactionsRequest {
  repeated int64 partition_ids = 1;
}

message PartitionGetInSkippedCompactionsResponse {
  SkippedCompaction skipped_compaction = 1;
}

message PartitionListSkippedCompactionsRequest {}

message PartitionListSkippedCompactionsResponse {
  SkippedCompaction skipped_compaction = 1;
}

message PartitionDeleteSkippedCompactionsRequest {
  int64 partition_id = 1;
}

message PartitionDeleteSkippedCompactionsResponse {
  SkippedCompaction skipped_compaction = 1;
}

message PartitionMostRecentNRequest {
  uint64 n = 1;
}

message PartitionMostRecentNResponse {
  Partition partition = 1;
}

message PartitionNewFileBetweenRequest {
  int64 minimum_time = 1;
  optional int64 maximum_time = 2;
}

message PartitionNewFileBetweenResponse {
  int64 partition_id = 1;
}

message PartitionNeedingColdCompactRequest {
  int64 maximum_time = 1;
  uint64 n = 2;
}

message PartitionNeedingColdCompactResponse {
  int64 partition_id = 1;
}

message PartitionUpdateColdCompactRequest {
  int64 partition_id = 1;
  int64 cold_compact_at = 2;
}

message PartitionUpdateColdCompactResponse {}

message PartitionListOldStyleRequest {}

message PartitionListOldStyleResponse {
  Partition partition = 1;
}

message PartitionDeleteByRetentionRequest {}

message PartitionDeleteByRetentionResponse {
  int64 table_id = 1;
  int64 partition_id = 2;
}

message PartitionSnapshotRequest {
  int64 partition_id = 1;
}

message PartitionSnapshotResponse {
  catalog_cache.v1.Partition partition = 1;
  uint64 generation = 2;
}

message ParquetFileFlagForDeleteByRetentionRequest {}

message ParquetFileFlagForDeleteByRetentionResponse {
  ObjectStoreId object_store_id = 1;
  int64 partition_id = 2;
}

message ParquetFileDeleteOldIdsOnlyRequest {
  int64 older_than = 1;
  int64 cutoff = 2;
}

message ParquetFileDeleteOldIdsOnlyResponse {
  ObjectStoreId object_store_id = 1;
}

message ParquetFileListByPartitionNotToDeleteBatchRequest {
  repeated int64 partition_ids = 1;
}

message ParquetFileListByPartitionNotToDeleteBatchResponse {
  ParquetFile parquet_file = 1;
}

message ParquetFileActiveAsOfRequest {
  int64 as_of = 1;
}

message ParquetFileActiveAsOfResponse {
  ParquetFile parquet_file = 1;
}

message ParquetFileGetByObjectStoreIdRequest {
  ObjectStoreId object_store_id = 1;
}

message ParquetFileGetByObjectStoreIdResponse {
  ParquetFile parquet_file = 1;
}

message ParquetFileExistsByObjectStoreIdBatchRequest {
  ObjectStoreId object_store_id = 1;
}

message ParquetFileExistsByObjectStoreIdBatchResponse {
  ObjectStoreId object_store_id = 1;
}

message ParquetFileCreateUpgradeDeleteRequest {
  repeated ObjectStoreId delete = 1;
  repeated ObjectStoreId upgrade = 2;
  repeated ParquetFileParams create = 3;
  int32 target_level = 4;
  int64 partition_id = 5;
}

message ParquetFileCreateUpgradeDeleteResponse {
  repeated int64 created_parquet_file_ids = 1;
}

message ServiceProtectionLimits {
  optional int32 max_tables = 1;
  optional int32 max_columns_per_table = 2;
}

message Namespace {
  int64 id = 1;
  string name = 2;
  optional int64 retention_period_ns = 3;
  int32 max_tables = 4;
  int32 max_columns_per_table = 5;
  optional int64 deleted_at = 6;
  influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 7;
  // A monotonically increasing counter tracking the version of this namespace's
  // metadata, as managed by the router.
  int64 router_version = 8;
}

enum SoftDeletedRows {
  SOFT_DELETED_ROWS_UNSPECIFIED = 0;
  SOFT_DELETED_ROWS_ALL_ROWS = 1;
  SOFT_DELETED_ROWS_EXCLUDE_DELETED = 2;
  SOFT_DELETED_ROWS_ONLY_DELETED = 3;
}

message Table {
  int64 id = 1;
  int64 namespace_id = 2;
  string name = 3;
  influxdata.iox.partition_template.v1.PartitionTemplate partition_template = 4;
}

message Column {
  int64 id = 1;
  int64 table_id = 2;
  string name = 3;
  influxdata.iox.column_type.v1.ColumnType column_type = 4;
}

message SortKeyIds {
  repeated int64 column_ids = 2;
}

message Partition {
  int64 id = 1;
  bytes hash_id = 2;
  int64 table_id = 3;
  string partition_key = 4;
  SortKeyIds sort_key_ids = 5;
  optional int64 new_file_at = 6;
  optional int64 cold_compact_at = 7;
}

message SkippedCompaction {
  int64 partition_id = 1;
  string reason = 2;
  int64 skipped_at = 3;
  int64 estimated_bytes = 4;
  int64 limit_bytes = 5;
  int64 num_files = 6;
  int64 limit_num_files = 7;
  int64 limit_num_files_first_in_partition = 8;
}

message ObjectStoreId {
  fixed64 high64 = 1;
  fixed64 low64 = 2;
}

message ColumnSet {
  repeated int64 column_ids = 1;
}

enum ParquetFileSource {
  PARQUET_FILE_SOURCE_UNSPECIFIED = 0;
  PARQUET_FILE_SOURCE_BULK_INGEST = 1;
}

message ParquetFileParams {
  int64 namespace_id = 1;
  int64 table_id = 2;
  int64 partition_id = 3;
  optional bytes partition_hash_id = 4;
  ObjectStoreId object_store_id = 5;
  int64 min_time = 6;
  int64 max_time = 7;
  int64 file_size_bytes = 8;
  int64 row_count = 9;
  int32 compaction_level = 10;
  int64 created_at = 11;
  ColumnSet column_set = 12;
  int64 max_l0_created_at = 13;
  ParquetFileSource source = 14;
}

message ParquetFile {
  reserved 4; // TransitionPartitionId

  int64 id = 1;
  int64 namespace_id = 2;
  int64 table_id = 3;
  int64 partition_id = 15;
  bytes partition_hash_id = 16;
  ObjectStoreId object_store_id = 5;
  int64 min_time = 6;
  int64 max_time = 7;
  optional int64 to_delete = 8;
  int64 file_size_bytes = 9;
  int64 row_count = 10;
  int32 compaction_level = 11;
  int64 created_at = 12;
  ColumnSet column_set = 13;
  int64 max_l0_created_at = 14;
  ParquetFileSource source = 17;
}
